@page "/posts/delete"
@using Microsoft.EntityFrameworkCore
@using TrySigninBlazor.Data
@inject IDbContextFactory<TrySigninBlazor.Data.TrySigninBlazorContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Post</h2>
    <hr />
    @if (post is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">@post.Image</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@post.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@post.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Type</dt>
            <dd class="col-sm-10">@post.Type</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Height</dt>
            <dd class="col-sm-10">@post.Height</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Width</dt>
            <dd class="col-sm-10">@post.Width</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Depth</dt>
            <dd class="col-sm-10">@post.Depth</dd>
        </dl>
        <EditForm method="post" Model="post" OnValidSubmit="DeletePost" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(post is null)">Delete</button> |
            <a href="/posts" class="back-list">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Post? post;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        post = await context.Post.FirstOrDefaultAsync(m => m.Id == Id);

        if (post is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Post.Remove(post!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/posts");
    }
}

<style>
    .back-list {
        display: inline-block;
        margin-top: 10px;
        padding: 6px 12px;
        background-color: #28a745;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        font-size: 14px;
    }
</style>
