@page "/posts/edit"
@using Microsoft.EntityFrameworkCore
@using TrySigninBlazor.Data
@inject IDbContextFactory<TrySigninBlazor.Data.TrySigninBlazorContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Post</h2>
<hr />
@if (Post is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Post" OnValidSubmit="UpdatePost" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Post.Id" value="@Post.Id" />
                <div class="mb-3">
                    <label for="image" class="form-label">Image:</label>
                    <InputText id="image" @bind-Value="Post.Image" class="form-control" />
                    <ValidationMessage For="() => Post.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Post.Name" class="form-control" />
                    <ValidationMessage For="() => Post.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Post.Description" class="form-control" />
                    <ValidationMessage For="() => Post.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputText id="type" @bind-Value="Post.Type" class="form-control" />
                    <ValidationMessage For="() => Post.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="height" class="form-label">Height:</label>
                    <InputNumber id="height" @bind-Value="Post.Height" class="form-control" />
                    <ValidationMessage For="() => Post.Height" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="width" class="form-label">Width:</label>
                    <InputNumber id="width" @bind-Value="Post.Width" class="form-control" />
                    <ValidationMessage For="() => Post.Width" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="depth" class="form-label">Depth:</label>
                    <InputNumber id="depth" @bind-Value="Post.Depth" class="form-control" />
                    <ValidationMessage For="() => Post.Depth" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/posts" class="back-list">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Post? Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Post ??= await context.Post.FirstOrDefaultAsync(m => m.Id == Id);

        if (Post is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

   private async Task UpdatePost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Post!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PostExists(Post!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/posts");
    }

    private bool PostExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Post.Any(e => e.Id == id);
    }
}
<style>
    .back-list {
        display: inline-block;
        margin-top: 10px;
        padding: 6px 12px;
        background-color: #28a745;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        font-size: 14px;
    }
</style>